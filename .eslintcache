[{"G:\\test\\react-ts-library\\src\\components\\Map.tsx":"1","G:\\test\\react-ts-library\\src\\App.tsx":"2","G:\\test\\react-ts-library\\src\\pages\\message\\index.tsx":"3","G:\\test\\react-ts-library\\src\\pages\\permission\\index.tsx":"4","G:\\test\\react-ts-library\\src\\pages\\table\\index.tsx":"5","G:\\test\\react-ts-library\\src\\index.tsx":"6","G:\\test\\react-ts-library\\src\\router\\index.tsx":"7","G:\\test\\react-ts-library\\src\\router\\config.ts":"8","G:\\test\\react-ts-library\\src\\components\\MyTable.tsx":"9","G:\\test\\react-ts-library\\src\\components\\MapPie.tsx":"10","G:\\test\\react-ts-library\\src\\data\\cityMap.ts":"11","G:\\test\\react-ts-library\\src\\pages\\home\\index.tsx":"12","G:\\test\\react-ts-library\\src\\pages\\role\\index.tsx":"13","G:\\test\\react-ts-library\\src\\components\\MapLine.tsx":"14","G:\\test\\react-ts-library\\src\\components\\PeopleFieldChart.tsx":"15","G:\\test\\react-ts-library\\src\\components\\PeopleNumberChart.tsx":"16"},{"size":9498,"mtime":1614913071386,"results":"17","hashOfConfig":"18"},{"size":1415,"mtime":1614150898875,"results":"19","hashOfConfig":"18"},{"size":150,"mtime":1614305056741,"results":"20","hashOfConfig":"18"},{"size":153,"mtime":1614150872285,"results":"21","hashOfConfig":"18"},{"size":203,"mtime":1614150886942,"results":"22","hashOfConfig":"18"},{"size":526,"mtime":1614305056735,"results":"23","hashOfConfig":"18"},{"size":2277,"mtime":1614305292144,"results":"24","hashOfConfig":"18"},{"size":784,"mtime":1614305056751,"results":"25","hashOfConfig":"18"},{"size":1702,"mtime":1608086217025,"results":"26","hashOfConfig":"18"},{"size":4390,"mtime":1609382699930,"results":"27","hashOfConfig":"18"},{"size":9891,"mtime":1608715445216,"results":"28","hashOfConfig":"18"},{"size":385,"mtime":1620289269932,"results":"29","hashOfConfig":"18"},{"size":147,"mtime":1614305056747,"results":"30","hashOfConfig":"18"},{"size":6185,"mtime":1620289565323,"results":"31","hashOfConfig":"18"},{"size":4351,"mtime":1620289855622,"results":"32","hashOfConfig":"18"},{"size":3708,"mtime":1620295573851,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"f3b5we",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\test\\react-ts-library\\src\\components\\Map.tsx",["69","70","71"],"import \"echarts/map/js/china.js\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { cityCode, province } from \"../data/cityMap\";\r\nimport echarts, { EChartOption, ECharts } from \"echarts\";\r\n\r\nimport { Button } from \"antd\";\r\nimport china from \"../assets/map/china.json\";\r\n\r\nconst com = () => {\r\n  return (\r\n    <div>\r\n      <p>333333</p>\r\n      <p>333333</p>\r\n      <p>333333</p>\r\n      <p>333333</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconsole.log(\"china\", china);\r\n\r\ninterface Props {}\r\nconst data: { name: string; value: number }[] = [\r\n  { name: \"南海诸岛\", value: 0 },\r\n  { name: \"北京\", value: 97 },\r\n  { name: \"天津\", value: 5 },\r\n  { name: \"上海\", value: 30 },\r\n  { name: \"重庆\", value: 2300 },\r\n  { name: \"河北\", value: 2 },\r\n  { name: \"河南\", value: 5000 },\r\n  { name: \"云南\", value: 122 },\r\n  { name: \"辽宁\", value: 4 },\r\n  { name: \"黑龙江\", value: 13 },\r\n  { name: \"湖南\", value: 129 },\r\n  { name: \"安徽\", value: 300 },\r\n  { name: \"山东\", value: 50 },\r\n  { name: \"新疆\", value: 2000 },\r\n  { name: \"江苏\", value: 499 },\r\n  { name: \"浙江\", value: 300 },\r\n  { name: \"江西\", value: 2689 },\r\n  { name: \"湖北\", value: 86285 },\r\n  { name: \"广西\", value: 3 },\r\n  { name: \"甘肃\", value: 40 },\r\n  { name: \"山西\", value: 1000 },\r\n  { name: \"内蒙古\", value: 300 },\r\n  { name: \"陕西\", value: 7 },\r\n  { name: \"吉林\", value: 8000 },\r\n  { name: \"福建\", value: 0 },\r\n  { name: \"贵州\", value: 500 },\r\n  { name: \"广东\", value: 49 },\r\n  { name: \"青海\", value: 400 },\r\n  { name: \"西藏\", value: 0 },\r\n  { name: \"四川\", value: 17 },\r\n  { name: \"宁夏\", value: 3000 },\r\n  { name: \"海南\", value: 800 },\r\n  { name: \"台湾\", value: 54 },\r\n  { name: \"香港\", value: 70 },\r\n  { name: \"澳门\", value: 2 },\r\n];\r\nconst Map: React.FC<Props> = () => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const [echartsInstance, setEchartsInstance] = useState<any>(null);\r\n  const option: EChartOption | any = {\r\n    layoutCenter: [\"40%\", \"50%\"], //图标平移位置\r\n    layoutSize: \"50%\", //缩放大小\r\n    title: {\r\n      text: \"主要的标题\",\r\n      subtext: \"子标题\",\r\n      left: \"40%\",\r\n      top: \"50\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      textAlign: \"center\", // 标题居中\r\n    },\r\n    toolbox: {\r\n      feature: {\r\n        myTool1: {\r\n          show: true,\r\n          title: \"自定义扩展方法1\",\r\n          icon: \"image://http://echarts.baidu.com/images/favicon.png\",\r\n          onclick: function () {\r\n            alert(\"myToolHandler1\");\r\n          },\r\n        },\r\n      },\r\n    },\r\n    graphic: {\r\n      elements: [\r\n        {\r\n          type: \"text\",\r\n          right: 100,\r\n          top: 200,\r\n          z: -10,\r\n          style: {\r\n            text: [\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字\",\r\n            ].join(\"\\n\"),\r\n            font: \"14px Microsoft YaHei\",\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    visualMap: [\r\n      {\r\n        dimension: 0,\r\n        inRange: {\r\n          color: [ \"#0f0\", \"#4575b4\", \"#74add1\", \"#f46d43\", \"#00f\"],\r\n        },\r\n        pieces: [\r\n          { min: 10000, label: \"10000以上\" },\r\n          { min: 5000, max: 10000, label: \"5000-10000\" },\r\n          { min: 1000, max: 5000, label: \"1000-5000\" },\r\n          { min: 100, max: 1000, label: \"100-1000\" },\r\n          { min: 0, max: 100, label: \"100以下\" },\r\n        ],\r\n        show: true,\r\n      },\r\n    ],\r\n    tooltip: {\r\n      show: true,\r\n      backgroundColor: \"#f00\", //提示标签背景颜色\r\n      textStyle: { color: \"#fff\" }, //提示标签字体颜色\r\n      formatter: (params: any) => {\r\n        console.log(\"地图数据\", params);\r\n        const data = params.data;\r\n        if (data) {\r\n          return `${data.name} <br />\r\n            塔机: ${data.taji} <br />\r\n            送货电梯: ${data.dianti} <br />\r\n          `;\r\n        } else {\r\n          return \"暂无数据\";\r\n        }\r\n      },\r\n    },\r\n    geo: {\r\n      zoom: 1,\r\n      nameProperty: \"name\",\r\n      nameMap: {\r\n        aomen: \"澳门\",\r\n        zoom: 5,\r\n      },\r\n      itemStyle: {\r\n        label: {\r\n          show: true,\r\n        },\r\n      },\r\n      regions: [\r\n        {\r\n          name: \"澳门\",\r\n          itemStyle: {\r\n            areaColor: \"red\",\r\n            color: \"red\",\r\n          },\r\n          label: {\r\n            show: true,\r\n          },\r\n          zoom: 5,\r\n        },\r\n      ],\r\n    },\r\n    // 可以为一个函数返回\r\n    series: [\r\n      {\r\n        name: \"标题==\",\r\n        type: \"map\",\r\n        map: \"china\",\r\n        data: [\r\n          { name: \"新疆\", value: 463, taji: 755, dianti: 254 },\r\n          { name: \"江苏\", value: 899, taji: 1111, dianti: 111 },\r\n          { name: \"浙江\", value: 300, taji: 222, dianti: 222 },\r\n          { name: \"江西\", value: 2689, taji: 333, dianti: 333 },\r\n          { name: \"湖北\", value: 86285, taji: 444, dianti: 444 },\r\n        ],\r\n        zoom: 2,\r\n        roam: true,\r\n        itemStyle: {\r\n          normal: {\r\n            borderWidth: 1, //区域边框宽度\r\n            borderColor: \"#ccc\", //区域边框颜色\r\n            areaColor: \"#f60\", //区域颜色\r\n          },\r\n          emphasis: {\r\n            borderWidth: 1, // 区域hover线宽\r\n            borderColor: \"#f60\", // 区域hover线颜色\r\n            areaColor: \"#0f0\", // 区域hover背景颜色\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!mapRef) return;\r\n    const mychart = echarts.init(\r\n      document.getElementById(\"china\") as HTMLDivElement\r\n    );\r\n    setEchartsInstance(mychart);\r\n    echartsInstance?.on(\"click\", (params: any) => {\r\n      console.log(\"params\", params);\r\n\r\n      if (params?.name in province) {\r\n        const city = province[params?.name];\r\n        const option1: EChartOption = {\r\n          visualMap: [\r\n            {\r\n              dimension: 0,\r\n              inRange: {\r\n                color: [\r\n                  \"#fff\",\r\n                  \"#4575b4\",\r\n                  \"#74add1\",\r\n                  \"#f46d43\",\r\n                  \"#d73027\",\r\n                  \"#a50026\",\r\n                ],\r\n              },\r\n              pieces: [\r\n                { min: 10000, label: \"10000以上\" },\r\n                { min: 5000, max: 10000, label: \"5000-10000\" },\r\n                { min: 1000, max: 5000, label: \"1000-5000\" },\r\n                { min: 100, max: 1000, label: \"100-1000\" },\r\n                { min: 0, max: 100, label: \"100以下\" },\r\n              ],\r\n              show: true,\r\n            },\r\n          ],\r\n          tooltip: {\r\n            show: true,\r\n            formatter: (params: any) => {\r\n              return `${params.name}:${params.value}`;\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: \"标题==\",\r\n              type: \"map\",\r\n              map: params?.name,\r\n              data,\r\n            },\r\n          ],\r\n        };\r\n        getCity(`province/${city}`, params, option1);\r\n      } else if (params?.name in cityCode) {\r\n        const code = cityCode[params?.name];\r\n        const option2: EChartOption = {\r\n          visualMap: [\r\n            {\r\n              dimension: 0,\r\n              inRange: {\r\n                color: [\r\n                  \"#fff\",\r\n                  \"#4575b4\",\r\n                  \"#74add1\",\r\n                  \"#f46d43\",\r\n                  \"#d73027\",\r\n                  \"#a50026\",\r\n                ],\r\n              },\r\n              pieces: [\r\n                { min: 10000, label: \"10000以上\" },\r\n                { min: 5000, max: 10000, label: \"5000-10000\" },\r\n                { min: 1000, max: 5000, label: \"1000-5000\" },\r\n                { min: 100, max: 1000, label: \"100-1000\" },\r\n                { min: 0, max: 100, label: \"100以下\" },\r\n              ],\r\n              show: true,\r\n            },\r\n          ],\r\n          tooltip: {\r\n            show: true,\r\n            formatter: (params: any) => {\r\n              return `${params.name}:${params.value}`;\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: \"标题==\",\r\n              type: \"map\",\r\n              map: params?.name,\r\n              data,\r\n            },\r\n          ],\r\n        };\r\n        getCity(`city/${code}`, params, option2);\r\n      }\r\n    });\r\n    echartsInstance?.setOption(option as any);\r\n  }, [mapRef, option]);\r\n\r\n  /** 获取省市 */\r\n  const getCity = (url: string, params: any, option: EChartOption) => {\r\n    echartsInstance.showLoading({\r\n      text: \"加载中\",\r\n      color: \"rgba(145,213,255,0.85)\", //设置转圈圈字体颜色\r\n      textColor: \"rgba(145,213,255,0.85)\", //设置文字字体颜色\r\n      maskColor: \"rgba(36, 102, 175, 0.05)\",\r\n      zlevel: 0,\r\n    });\r\n    import(`../assets/map/${url}.json`).then((geoJson) => {\r\n      console.log(\"geoJson\", geoJson);\r\n      echartsInstance?.hideLoading();\r\n      echarts?.registerMap(params?.name, geoJson.default);\r\n      echartsInstance?.setOption(option);\r\n    });\r\n  };\r\n\r\n  const goback = () => {\r\n    echartsInstance?.setOption(option as any);\r\n  };\r\n  return (\r\n    <>\r\n      <Button onClick={goback}>返回</Button>\r\n      <div\r\n        id=\"china\"\r\n        ref={mapRef}\r\n        style={{ width: \"100%\", height: \"600px\", border: \"1px solid #ccc\" }}\r\n      ></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","G:\\test\\react-ts-library\\src\\App.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\message\\index.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\permission\\index.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\table\\index.tsx",[],"G:\\test\\react-ts-library\\src\\index.tsx",[],["72","73"],"G:\\test\\react-ts-library\\src\\router\\index.tsx",["74"],"import \"./index.less\";\r\n\r\nimport { Button, Menu } from \"antd\";\r\n\r\nimport React from \"react\";\r\nimport routes from \"./config\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconsole.log(\"routes\", routes);\r\n\r\nconst { SubMenu } = Menu;\r\n\r\ninterface Props {}\r\n\r\nconst Wrap: React.FC<Props> = (props) => {\r\n  const history = useHistory();\r\n\r\n  // submenu keys of first level\r\n  const rootSubmenuKeys = [\"sub1\", \"sub2\", \"sub4\"];\r\n\r\n  const [openKeys, setOpenKeys] = React.useState([\"sub1\"]);\r\n\r\n  const onOpenChange = (keys: any) => {\r\n    const latestOpenKey = keys.find((key: any) => openKeys.indexOf(key) === -1);\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n      setOpenKeys(keys);\r\n    } else {\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\r\n    }\r\n  };\r\n\r\n  // 菜单渲染\r\n  const renderMenu = (data: any) => {\r\n    let path = \"\";\r\n    return data.map((item: any) => {\r\n      if (item.children) {\r\n        const cItem = item.children.find((cItem: any) => cItem.key === path);\r\n        if (cItem) {\r\n          setOpenKeys(item.key); // 把openKey存在this种\r\n        }\r\n        return (\r\n          <SubMenu\r\n            key={item.key}\r\n            title={\r\n              <span>\r\n                <item.icon type={item.icon} />\r\n                <span>{item.title}</span>\r\n              </span>\r\n            }\r\n          >\r\n            {renderMenu(item.children)}\r\n          </SubMenu>\r\n        );\r\n      }\r\n      // 判断item是否是当前对应的item\r\n      // if (item.key === path || path.indexOf(item.key) ===0) { //存在二季子路由判断\r\n\r\n      return (\r\n        <Menu.Item title={item.title} key={item.key}>\r\n          <span\r\n            key={item.key}\r\n            onClick={() => {\r\n              history.push(item.key);\r\n            }}\r\n          >\r\n            <item.icon type={item.icon} />\r\n            <span> {item.title}</span>\r\n          </span>\r\n        </Menu.Item>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <Menu\r\n        mode=\"inline\"\r\n        openKeys={openKeys}\r\n        onOpenChange={onOpenChange}\r\n        style={{ width: 256 }}\r\n      >\r\n        {renderMenu(routes)}\r\n      </Menu>\r\n      <div className=\"content\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Wrap;\r\n","G:\\test\\react-ts-library\\src\\router\\config.ts",[],"G:\\test\\react-ts-library\\src\\components\\MyTable.tsx",[],"G:\\test\\react-ts-library\\src\\components\\MapPie.tsx",["75","76"],"G:\\test\\react-ts-library\\src\\data\\cityMap.ts",[],"G:\\test\\react-ts-library\\src\\pages\\home\\index.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\role\\index.tsx",[],"G:\\test\\react-ts-library\\src\\components\\MapLine.tsx",["77","78","79"],"G:\\test\\react-ts-library\\src\\components\\PeopleFieldChart.tsx",[],"G:\\test\\react-ts-library\\src\\components\\PeopleNumberChart.tsx",[],{"ruleId":"80","severity":1,"message":"81","line":5,"column":33,"nodeType":"82","messageId":"83","endLine":5,"endColumn":40},{"ruleId":"80","severity":1,"message":"84","line":10,"column":7,"nodeType":"82","messageId":"83","endLine":10,"endColumn":10},{"ruleId":"85","severity":1,"message":"86","line":294,"column":6,"nodeType":"87","endLine":294,"endColumn":22,"suggestions":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"80","severity":1,"message":"93","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":16},{"ruleId":"80","severity":1,"message":"81","line":2,"column":33,"nodeType":"82","messageId":"83","endLine":2,"endColumn":40},{"ruleId":"85","severity":1,"message":"94","line":161,"column":6,"nodeType":"87","endLine":161,"endColumn":22,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"81","line":2,"column":33,"nodeType":"82","messageId":"83","endLine":2,"endColumn":40},{"ruleId":"80","severity":1,"message":"96","line":5,"column":7,"nodeType":"82","messageId":"83","endLine":5,"endColumn":16},{"ruleId":"85","severity":1,"message":"94","line":204,"column":6,"nodeType":"87","endLine":204,"endColumn":22,"suggestions":"97"},"@typescript-eslint/no-unused-vars","'ECharts' is defined but never used.","Identifier","unusedVar","'com' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'echartsInstance' and 'getCity'. Either include them or remove the dependency array.","ArrayExpression",["98"],"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'echartsInstance'. Either include it or remove the dependency array.",["101"],"'rich' is assigned a value but never used.",["102"],{"desc":"103","fix":"104"},"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"105","fix":"107"},"Update the dependencies array to be: [echartsInstance, getCity, mapRef, option]",{"range":"108","text":"109"},"Update the dependencies array to be: [echartsInstance, mapRef, option]",{"range":"110","text":"111"},{"range":"112","text":"111"},[8008,8024],"[echartsInstance, getCity, mapRef, option]",[3975,3991],"[echartsInstance, mapRef, option]",[5539,5555]]