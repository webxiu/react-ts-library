[{"G:\\test\\react-ts-library\\src\\components\\Map.tsx":"1","G:\\test\\react-ts-library\\src\\App.tsx":"2","G:\\test\\react-ts-library\\src\\pages\\message\\index.tsx":"3","G:\\test\\react-ts-library\\src\\pages\\permission\\index.tsx":"4","G:\\test\\react-ts-library\\src\\pages\\table\\index.tsx":"5","G:\\test\\react-ts-library\\src\\index.tsx":"6","G:\\test\\react-ts-library\\src\\router\\index.tsx":"7","G:\\test\\react-ts-library\\src\\router\\config.ts":"8","G:\\test\\react-ts-library\\src\\components\\MyTable.tsx":"9","G:\\test\\react-ts-library\\src\\components\\MapPie.tsx":"10","G:\\test\\react-ts-library\\src\\data\\cityMap.ts":"11","G:\\test\\react-ts-library\\src\\pages\\home\\index.tsx":"12","G:\\test\\react-ts-library\\src\\pages\\role\\index.tsx":"13","G:\\test\\react-ts-library\\src\\components\\MapLine.tsx":"14","G:\\test\\react-ts-library\\src\\components\\PeopleFieldChart.tsx":"15","G:\\test\\react-ts-library\\src\\components\\PeopleNumberChart.tsx":"16","G:\\test\\react-ts-library\\src\\pages\\notFound\\index.tsx":"17"},{"size":9498,"mtime":1614913071386,"results":"18","hashOfConfig":"19"},{"size":1415,"mtime":1614305056731,"results":"20","hashOfConfig":"19"},{"size":150,"mtime":1614305056741,"results":"21","hashOfConfig":"19"},{"size":153,"mtime":1614150872285,"results":"22","hashOfConfig":"19"},{"size":203,"mtime":1614305056749,"results":"23","hashOfConfig":"19"},{"size":526,"mtime":1614305056735,"results":"24","hashOfConfig":"19"},{"size":2277,"mtime":1614305292144,"results":"25","hashOfConfig":"19"},{"size":784,"mtime":1614305056751,"results":"26","hashOfConfig":"19"},{"size":1702,"mtime":1608086217025,"results":"27","hashOfConfig":"19"},{"size":4390,"mtime":1609382699930,"results":"28","hashOfConfig":"19"},{"size":9891,"mtime":1608715445216,"results":"29","hashOfConfig":"19"},{"size":578,"mtime":1620295122499,"results":"30","hashOfConfig":"19"},{"size":147,"mtime":1614305056747,"results":"31","hashOfConfig":"19"},{"size":6185,"mtime":1620289565323,"results":"32","hashOfConfig":"19"},{"size":4166,"mtime":1620474358748,"results":"33","hashOfConfig":"19"},{"size":4494,"mtime":1620474390216,"results":"34","hashOfConfig":"19"},{"size":141,"mtime":1609227053117,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"f3b5we",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\test\\react-ts-library\\src\\components\\Map.tsx",["76","77","78"],"import \"echarts/map/js/china.js\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { cityCode, province } from \"../data/cityMap\";\r\nimport echarts, { EChartOption, ECharts } from \"echarts\";\r\n\r\nimport { Button } from \"antd\";\r\nimport china from \"../assets/map/china.json\";\r\n\r\nconst com = () => {\r\n  return (\r\n    <div>\r\n      <p>333333</p>\r\n      <p>333333</p>\r\n      <p>333333</p>\r\n      <p>333333</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconsole.log(\"china\", china);\r\n\r\ninterface Props {}\r\nconst data: { name: string; value: number }[] = [\r\n  { name: \"南海诸岛\", value: 0 },\r\n  { name: \"北京\", value: 97 },\r\n  { name: \"天津\", value: 5 },\r\n  { name: \"上海\", value: 30 },\r\n  { name: \"重庆\", value: 2300 },\r\n  { name: \"河北\", value: 2 },\r\n  { name: \"河南\", value: 5000 },\r\n  { name: \"云南\", value: 122 },\r\n  { name: \"辽宁\", value: 4 },\r\n  { name: \"黑龙江\", value: 13 },\r\n  { name: \"湖南\", value: 129 },\r\n  { name: \"安徽\", value: 300 },\r\n  { name: \"山东\", value: 50 },\r\n  { name: \"新疆\", value: 2000 },\r\n  { name: \"江苏\", value: 499 },\r\n  { name: \"浙江\", value: 300 },\r\n  { name: \"江西\", value: 2689 },\r\n  { name: \"湖北\", value: 86285 },\r\n  { name: \"广西\", value: 3 },\r\n  { name: \"甘肃\", value: 40 },\r\n  { name: \"山西\", value: 1000 },\r\n  { name: \"内蒙古\", value: 300 },\r\n  { name: \"陕西\", value: 7 },\r\n  { name: \"吉林\", value: 8000 },\r\n  { name: \"福建\", value: 0 },\r\n  { name: \"贵州\", value: 500 },\r\n  { name: \"广东\", value: 49 },\r\n  { name: \"青海\", value: 400 },\r\n  { name: \"西藏\", value: 0 },\r\n  { name: \"四川\", value: 17 },\r\n  { name: \"宁夏\", value: 3000 },\r\n  { name: \"海南\", value: 800 },\r\n  { name: \"台湾\", value: 54 },\r\n  { name: \"香港\", value: 70 },\r\n  { name: \"澳门\", value: 2 },\r\n];\r\nconst Map: React.FC<Props> = () => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const [echartsInstance, setEchartsInstance] = useState<any>(null);\r\n  const option: EChartOption | any = {\r\n    layoutCenter: [\"40%\", \"50%\"], //图标平移位置\r\n    layoutSize: \"50%\", //缩放大小\r\n    title: {\r\n      text: \"主要的标题\",\r\n      subtext: \"子标题\",\r\n      left: \"40%\",\r\n      top: \"50\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      textAlign: \"center\", // 标题居中\r\n    },\r\n    toolbox: {\r\n      feature: {\r\n        myTool1: {\r\n          show: true,\r\n          title: \"自定义扩展方法1\",\r\n          icon: \"image://http://echarts.baidu.com/images/favicon.png\",\r\n          onclick: function () {\r\n            alert(\"myToolHandler1\");\r\n          },\r\n        },\r\n      },\r\n    },\r\n    graphic: {\r\n      elements: [\r\n        {\r\n          type: \"text\",\r\n          right: 100,\r\n          top: 200,\r\n          z: -10,\r\n          style: {\r\n            text: [\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字自定义文字\",\r\n              \"自定义文字\",\r\n            ].join(\"\\n\"),\r\n            font: \"14px Microsoft YaHei\",\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    visualMap: [\r\n      {\r\n        dimension: 0,\r\n        inRange: {\r\n          color: [ \"#0f0\", \"#4575b4\", \"#74add1\", \"#f46d43\", \"#00f\"],\r\n        },\r\n        pieces: [\r\n          { min: 10000, label: \"10000以上\" },\r\n          { min: 5000, max: 10000, label: \"5000-10000\" },\r\n          { min: 1000, max: 5000, label: \"1000-5000\" },\r\n          { min: 100, max: 1000, label: \"100-1000\" },\r\n          { min: 0, max: 100, label: \"100以下\" },\r\n        ],\r\n        show: true,\r\n      },\r\n    ],\r\n    tooltip: {\r\n      show: true,\r\n      backgroundColor: \"#f00\", //提示标签背景颜色\r\n      textStyle: { color: \"#fff\" }, //提示标签字体颜色\r\n      formatter: (params: any) => {\r\n        console.log(\"地图数据\", params);\r\n        const data = params.data;\r\n        if (data) {\r\n          return `${data.name} <br />\r\n            塔机: ${data.taji} <br />\r\n            送货电梯: ${data.dianti} <br />\r\n          `;\r\n        } else {\r\n          return \"暂无数据\";\r\n        }\r\n      },\r\n    },\r\n    geo: {\r\n      zoom: 1,\r\n      nameProperty: \"name\",\r\n      nameMap: {\r\n        aomen: \"澳门\",\r\n        zoom: 5,\r\n      },\r\n      itemStyle: {\r\n        label: {\r\n          show: true,\r\n        },\r\n      },\r\n      regions: [\r\n        {\r\n          name: \"澳门\",\r\n          itemStyle: {\r\n            areaColor: \"red\",\r\n            color: \"red\",\r\n          },\r\n          label: {\r\n            show: true,\r\n          },\r\n          zoom: 5,\r\n        },\r\n      ],\r\n    },\r\n    // 可以为一个函数返回\r\n    series: [\r\n      {\r\n        name: \"标题==\",\r\n        type: \"map\",\r\n        map: \"china\",\r\n        data: [\r\n          { name: \"新疆\", value: 463, taji: 755, dianti: 254 },\r\n          { name: \"江苏\", value: 899, taji: 1111, dianti: 111 },\r\n          { name: \"浙江\", value: 300, taji: 222, dianti: 222 },\r\n          { name: \"江西\", value: 2689, taji: 333, dianti: 333 },\r\n          { name: \"湖北\", value: 86285, taji: 444, dianti: 444 },\r\n        ],\r\n        zoom: 2,\r\n        roam: true,\r\n        itemStyle: {\r\n          normal: {\r\n            borderWidth: 1, //区域边框宽度\r\n            borderColor: \"#ccc\", //区域边框颜色\r\n            areaColor: \"#f60\", //区域颜色\r\n          },\r\n          emphasis: {\r\n            borderWidth: 1, // 区域hover线宽\r\n            borderColor: \"#f60\", // 区域hover线颜色\r\n            areaColor: \"#0f0\", // 区域hover背景颜色\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!mapRef) return;\r\n    const mychart = echarts.init(\r\n      document.getElementById(\"china\") as HTMLDivElement\r\n    );\r\n    setEchartsInstance(mychart);\r\n    echartsInstance?.on(\"click\", (params: any) => {\r\n      console.log(\"params\", params);\r\n\r\n      if (params?.name in province) {\r\n        const city = province[params?.name];\r\n        const option1: EChartOption = {\r\n          visualMap: [\r\n            {\r\n              dimension: 0,\r\n              inRange: {\r\n                color: [\r\n                  \"#fff\",\r\n                  \"#4575b4\",\r\n                  \"#74add1\",\r\n                  \"#f46d43\",\r\n                  \"#d73027\",\r\n                  \"#a50026\",\r\n                ],\r\n              },\r\n              pieces: [\r\n                { min: 10000, label: \"10000以上\" },\r\n                { min: 5000, max: 10000, label: \"5000-10000\" },\r\n                { min: 1000, max: 5000, label: \"1000-5000\" },\r\n                { min: 100, max: 1000, label: \"100-1000\" },\r\n                { min: 0, max: 100, label: \"100以下\" },\r\n              ],\r\n              show: true,\r\n            },\r\n          ],\r\n          tooltip: {\r\n            show: true,\r\n            formatter: (params: any) => {\r\n              return `${params.name}:${params.value}`;\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: \"标题==\",\r\n              type: \"map\",\r\n              map: params?.name,\r\n              data,\r\n            },\r\n          ],\r\n        };\r\n        getCity(`province/${city}`, params, option1);\r\n      } else if (params?.name in cityCode) {\r\n        const code = cityCode[params?.name];\r\n        const option2: EChartOption = {\r\n          visualMap: [\r\n            {\r\n              dimension: 0,\r\n              inRange: {\r\n                color: [\r\n                  \"#fff\",\r\n                  \"#4575b4\",\r\n                  \"#74add1\",\r\n                  \"#f46d43\",\r\n                  \"#d73027\",\r\n                  \"#a50026\",\r\n                ],\r\n              },\r\n              pieces: [\r\n                { min: 10000, label: \"10000以上\" },\r\n                { min: 5000, max: 10000, label: \"5000-10000\" },\r\n                { min: 1000, max: 5000, label: \"1000-5000\" },\r\n                { min: 100, max: 1000, label: \"100-1000\" },\r\n                { min: 0, max: 100, label: \"100以下\" },\r\n              ],\r\n              show: true,\r\n            },\r\n          ],\r\n          tooltip: {\r\n            show: true,\r\n            formatter: (params: any) => {\r\n              return `${params.name}:${params.value}`;\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: \"标题==\",\r\n              type: \"map\",\r\n              map: params?.name,\r\n              data,\r\n            },\r\n          ],\r\n        };\r\n        getCity(`city/${code}`, params, option2);\r\n      }\r\n    });\r\n    echartsInstance?.setOption(option as any);\r\n  }, [mapRef, option]);\r\n\r\n  /** 获取省市 */\r\n  const getCity = (url: string, params: any, option: EChartOption) => {\r\n    echartsInstance.showLoading({\r\n      text: \"加载中\",\r\n      color: \"rgba(145,213,255,0.85)\", //设置转圈圈字体颜色\r\n      textColor: \"rgba(145,213,255,0.85)\", //设置文字字体颜色\r\n      maskColor: \"rgba(36, 102, 175, 0.05)\",\r\n      zlevel: 0,\r\n    });\r\n    import(`../assets/map/${url}.json`).then((geoJson) => {\r\n      console.log(\"geoJson\", geoJson);\r\n      echartsInstance?.hideLoading();\r\n      echarts?.registerMap(params?.name, geoJson.default);\r\n      echartsInstance?.setOption(option);\r\n    });\r\n  };\r\n\r\n  const goback = () => {\r\n    echartsInstance?.setOption(option as any);\r\n  };\r\n  return (\r\n    <>\r\n      <Button onClick={goback}>返回</Button>\r\n      <div\r\n        id=\"china\"\r\n        ref={mapRef}\r\n        style={{ width: \"100%\", height: \"600px\", border: \"1px solid #ccc\" }}\r\n      ></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","G:\\test\\react-ts-library\\src\\App.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\message\\index.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\permission\\index.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\table\\index.tsx",[],"G:\\test\\react-ts-library\\src\\index.tsx",[],["79","80"],"G:\\test\\react-ts-library\\src\\router\\index.tsx",["81"],"import \"./index.less\";\r\n\r\nimport { Button, Menu } from \"antd\";\r\n\r\nimport React from \"react\";\r\nimport routes from \"./config\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconsole.log(\"routes\", routes);\r\n\r\nconst { SubMenu } = Menu;\r\n\r\ninterface Props {}\r\n\r\nconst Wrap: React.FC<Props> = (props) => {\r\n  const history = useHistory();\r\n\r\n  // submenu keys of first level\r\n  const rootSubmenuKeys = [\"sub1\", \"sub2\", \"sub4\"];\r\n\r\n  const [openKeys, setOpenKeys] = React.useState([\"sub1\"]);\r\n\r\n  const onOpenChange = (keys: any) => {\r\n    const latestOpenKey = keys.find((key: any) => openKeys.indexOf(key) === -1);\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n      setOpenKeys(keys);\r\n    } else {\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\r\n    }\r\n  };\r\n\r\n  // 菜单渲染\r\n  const renderMenu = (data: any) => {\r\n    let path = \"\";\r\n    return data.map((item: any) => {\r\n      if (item.children) {\r\n        const cItem = item.children.find((cItem: any) => cItem.key === path);\r\n        if (cItem) {\r\n          setOpenKeys(item.key); // 把openKey存在this种\r\n        }\r\n        return (\r\n          <SubMenu\r\n            key={item.key}\r\n            title={\r\n              <span>\r\n                <item.icon type={item.icon} />\r\n                <span>{item.title}</span>\r\n              </span>\r\n            }\r\n          >\r\n            {renderMenu(item.children)}\r\n          </SubMenu>\r\n        );\r\n      }\r\n      // 判断item是否是当前对应的item\r\n      // if (item.key === path || path.indexOf(item.key) ===0) { //存在二季子路由判断\r\n\r\n      return (\r\n        <Menu.Item title={item.title} key={item.key}>\r\n          <span\r\n            key={item.key}\r\n            onClick={() => {\r\n              history.push(item.key);\r\n            }}\r\n          >\r\n            <item.icon type={item.icon} />\r\n            <span> {item.title}</span>\r\n          </span>\r\n        </Menu.Item>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <Menu\r\n        mode=\"inline\"\r\n        openKeys={openKeys}\r\n        onOpenChange={onOpenChange}\r\n        style={{ width: 256 }}\r\n      >\r\n        {renderMenu(routes)}\r\n      </Menu>\r\n      <div className=\"content\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Wrap;\r\n","G:\\test\\react-ts-library\\src\\router\\config.ts",[],"G:\\test\\react-ts-library\\src\\components\\MyTable.tsx",[],"G:\\test\\react-ts-library\\src\\components\\MapPie.tsx",["82","83"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport echarts, { EChartOption, ECharts } from \"echarts\";\r\n\r\ninterface Props {}\r\nconst rich: any = {\r\n  one: {\r\n    color: \"#f5ed00\",\r\n    fontSize: 25,\r\n    padding: [1.5, 0],\r\n    align: \"center\",\r\n  },\r\n  two: {\r\n    color: \"#c58029\",\r\n    fontSize: 20,\r\n    padding: [1.5, 0],\r\n    align: \"center\",\r\n  },\r\n  three: {\r\n    color: \"#fdaaeb\",\r\n    align: \"center\",\r\n    fontSize: 32,\r\n    padding: [1.5, 0],\r\n  },\r\n  four: {\r\n    color: \"#EF3E5A\",\r\n    fontSize: 25,\r\n    align: \"center\",\r\n  },\r\n  five: {\r\n    color: \"#f60\",\r\n    fontSize: 20,\r\n    align: \"center\",\r\n  },\r\n  six: {\r\n    color: \"#f0f\",\r\n    fontSize: 20,\r\n    align: \"center\",\r\n  },\r\n};\r\nconst dataPie: any = [\r\n  { value: 335, name: \"18-30岁\" },\r\n  { value: 310, name: \"31-40岁\" },\r\n  { value: 234, name: \"41-50岁\" },\r\n  { value: 135, name: \"51-60岁\" },\r\n  { value: 1548, name: \"61岁以上\"},\r\n  { value: 542, name: \"未标明\" },\r\n];\r\nconst Map: React.FC<Props> = () => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const [echartsInstance, setEchartsInstance] = useState<any>(null);\r\n  const option: EChartOption | any = {\r\n    title: {\r\n      text: \"主要的标题\",\r\n      subtext: \"子标题\",\r\n      left: \"40%\",\r\n      top: \"10\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      textAlign: \"center\", // 标题居中\r\n    },\r\n\r\n    tooltip: {\r\n      show: true,\r\n      backgroundColor: \"#f3214c\", //提示标签背景颜色\r\n      textStyle: { color: \"#ffa\", align: \"left\" }, //提示标签字体颜色\r\n      formatter: \"{a} <br/>{b}: {c} ({d}%)\",\r\n      // formatter: (params: any) => {\r\n      //   return `{a}${params.name}:${params.value}`;\r\n      // },\r\n    },\r\n    /** 图标kuangao */\r\n    grid: {\r\n      containLabel: true,\r\n      left: 10,\r\n      right: 5,\r\n      top: 60,\r\n      bottom: 10,\r\n    },\r\n    legend: {\r\n      orient: \"vertical\",\r\n      data: [\"18-30岁\", \"31-40岁\", \"41-50岁\", \"51-60岁\", \"61岁以上\", \"未标明\"],\r\n      top: \"12%\",\r\n      right: \"50\",\r\n      itemGap: 15,\r\n      icon: \"square\",\r\n      textStyle: {\r\n        // 边栏字体颜色\r\n        color: \"rgba(100, 100, 100, 1)\",\r\n        fontSize: 16,\r\n        rich: rich,\r\n      },\r\n      formatter: function (name: any) {\r\n        // console.log(\"name==\", name);\r\n        let str: string = \"\";\r\n        dataPie.forEach((item: any, i: number) => {\r\n          if (item.name === name) {\r\n            const color = Object.keys(rich)[i];\r\n            str += `${item.name} | {${color}|${item.value}}%`;\r\n          }\r\n        });\r\n        return str;\r\n      },\r\n    },\r\n    // 可以为一个函数返回\r\n    series: [\r\n      {\r\n        name: \"位置追踪\",\r\n        data: dataPie,\r\n        type: \"pie\",\r\n        radius: [\"50%\", \"70%\"],\r\n        avoidLabelOverlap: false,\r\n         // 是否显示环形中间的文字formatter\r\n        label: {\r\n          show: false,\r\n          position: \"center\", // 文字再环形中间还是两边: right/left...\r\n          // formatter: function (params:any) {\r\n          //   console.log('params*****', params)\r\n          // }\r\n          formatter: \"{b}\\n{c} ({d}%)\",\r\n          \r\n        },\r\n        // hover环形中间的文字样式\r\n        emphasis: {\r\n          label: {\r\n            show: true,\r\n            fontSize: 20,\r\n            fontWeight: \"bold\",\r\n          },\r\n        },\r\n        labelLine: {\r\n          show: false,\r\n        },\r\n        // 柱状图背景色\r\n        showBackground: true,\r\n        backgroundStyle: {\r\n          // color: \"rgba(255, 0, 220, 0.5)\",\r\n          color: \"#0f0\",\r\n        },\r\n\r\n        itemStyle: {\r\n          color: function (data: any) {\r\n            const index = data.dataIndex;\r\n            const color = Object.keys(rich)[index];\r\n            return rich[color].color;\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!mapRef) return;\r\n    const mychart = echarts.init(\r\n      document.getElementById(\"apie\") as HTMLDivElement\r\n    );\r\n    setEchartsInstance(mychart);\r\n    echartsInstance?.on(\"click\", (params: any) => {\r\n      console.log(\"params\", params);\r\n    });\r\n    echartsInstance?.setOption(option as any);\r\n  }, [mapRef, option]);\r\n\r\n  return (\r\n    <div\r\n      id=\"apie\"\r\n      ref={mapRef}\r\n      style={{ width: \"100%\", height: \"600px\", border: \"1px solid #ccc\" }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n",["84","85"],"G:\\test\\react-ts-library\\src\\data\\cityMap.ts",[],"G:\\test\\react-ts-library\\src\\pages\\home\\index.tsx",[],"G:\\test\\react-ts-library\\src\\pages\\role\\index.tsx",[],"G:\\test\\react-ts-library\\src\\components\\MapLine.tsx",["86","87","88"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport echarts, { EChartOption, ECharts } from \"echarts\";\r\n\r\ninterface Props {}\r\nconst rich: any = {\r\n  one: {\r\n    color: \"#f5ed00\",\r\n    fontSize: 25,\r\n    padding: [1.5, 0],\r\n    align: \"center\",\r\n  },\r\n  two: {\r\n    color: \"#c58029\",\r\n    fontSize: 20,\r\n    padding: [1.5, 0],\r\n    align: \"center\",\r\n  },\r\n  three: {\r\n    color: \"#fdaaeb\",\r\n    align: \"center\",\r\n    fontSize: 32,\r\n    padding: [1.5, 0],\r\n  },\r\n  four: {\r\n    color: \"#EF3E5A\",\r\n    fontSize: 25,\r\n    align: \"center\",\r\n  },\r\n  five: {\r\n    color: \"#f60\",\r\n    fontSize: 20,\r\n    align: \"center\",\r\n  },\r\n  six: {\r\n    color: \"#f0f\",\r\n    fontSize: 20,\r\n    align: \"center\",\r\n  },\r\n};\r\n\r\nconst random = (min: number = 100, max: number = 5000) => {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n};\r\nconst dataLine1: any = [\r\n  { value: random(), name: \"10:00\" },\r\n  { value: random(), name: \"10:30\" },\r\n  { value: random(), name: \"11:00\" },\r\n  { value: random(), name: \"11:30\" },\r\n  { value: random(), name: \"12:00\" },\r\n  { value: random(), name: \"12:30\" },\r\n  { value: random(), name: \"13:00\" },\r\n  { value: random(), name: \"13:30\" },\r\n];\r\nconst dataLine2: any = [\r\n  { value: random(), name: \"10:00\" },\r\n  { value: random(), name: \"10:30\" },\r\n  { value: random(), name: \"11:00\" },\r\n  { value: random(), name: \"11:30\" },\r\n  { value: random(), name: \"12:00\" },\r\n  { value: random(), name: \"12:30\" },\r\n  { value: random(), name: \"13:00\" },\r\n  { value: random(), name: \"13:30\" },\r\n];\r\nconst dataLine3: any = [\r\n  { value: random(), name: \"10:00\" },\r\n  { value: random(), name: \"10:30\" },\r\n  { value: random(), name: \"11:00\" },\r\n  { value: random(), name: \"11:30\" },\r\n  { value: random(), name: \"12:00\" },\r\n  { value: random(), name: \"12:30\" },\r\n  { value: random(), name: \"13:00\" },\r\n  { value: random(), name: \"13:30\" },\r\n];\r\nconst dataX: string[] = dataLine3.map((item: any) => item.name);\r\nconst Map: React.FC<Props> = () => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const [echartsInstance, setEchartsInstance] = useState<any>(null);\r\n  const option: EChartOption | any = {\r\n    title: {\r\n      text: \"新增样本/检材/终端数量统计\",\r\n      subtext: \"子标题\",\r\n      // left: \"40%\",\r\n      top: \"10\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      textAlign: \"left\", // 标题居中\r\n    },\r\n\r\n    tooltip: {\r\n      show: true,\r\n      trigger: \"axis\",\r\n      backgroundColor: \"#f0f\", //提示标签背景颜色\r\n      textStyle: { color: \"#ffa\", align: \"left\" }, //提示标签字体颜色\r\n      // formatter: \"{a} <br/>{b}: {c} ({d}%)\",\r\n      // formatter: (params: any) => {\r\n      //   console.log('线图参数:', params)\r\n      //   return `{a}${params.name}:${params.value}`;\r\n      // },\r\n    },\r\n    /** 图标宽高 */\r\n    grid: {\r\n      containLabel: true,\r\n      left: 10,\r\n      right: 100,\r\n      top: 60,\r\n      bottom: 50,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      boundaryGap: false,\r\n      data: dataX,\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n    },\r\n    // dataZoom: [{ type: \"inside\" }, { type: \"slider\" }],\r\n    dataZoom: [\r\n      //给x轴设置滚动条\r\n      {\r\n        type: \"slider\",\r\n        start: 0, //默认为0\r\n        end: 50,\r\n        show: true,\r\n        xAxisIndex: [0],\r\n        handleSize: 20, //滑动条的 左右2个滑动条的大小\r\n        height: 20, //组件高度\r\n        left: 50, //左边的距离\r\n        right: 100, //右边的距离\r\n        bottom: 20, //右边的距离\r\n        handleColor: \"#f60\", //h滑动图标的颜色\r\n        handleStyle: {\r\n          borderColor: \"#00f\",\r\n          borderWidth: \"1\",\r\n          shadowBlur: 2,\r\n          background: \"#ddd\",\r\n          shadowColor: \"#ddd\",\r\n        },\r\n        textStyle: {\r\n          fontSize: 14,\r\n          lineHeight: \"20\",\r\n          color: \"#ddd\",\r\n        },\r\n        fillerColor: new echarts.graphic.LinearGradient(1, 0, 0, 0, [\r\n          {\r\n            //给颜色设置渐变色 前面4个参数，给第一个设置1，第四个设置0 ，就是水平渐变\r\n            //给第一个设置0，第四个设置1，就是垂直渐变\r\n            offset: 0,\r\n            color: \"#f00\",\r\n          },\r\n          {\r\n            offset: 1,\r\n            color: \"#00f\",\r\n          },\r\n        ]),\r\n        backgroundColor: \"#f0f\", //两边未选中的滑动条区域的颜色\r\n        showDataShadow: true, //是否显示数据阴影 默认auto\r\n        showDetail: true, //即拖拽时候是否显示详细数值信息 默认true\r\n        handleIcon:\r\n          \"M-292,322.2c-3.2,0-6.4-0.6-9.3-1.9c-2.9-1.2-5.4-2.9-7.6-5.1s-3.9-4.8-5.1-7.6c-1.3-3-1.9-6.1-1.9-9.3c0-3.2,0.6-6.4,1.9-9.3c1.2-2.9,2.9-5.4,5.1-7.6s4.8-3.9,7.6-5.1c3-1.3,6.1-1.9,9.3-1.9c3.2,0,6.4,0.6,9.3,1.9c2.9,1.2,5.4,2.9,7.6,5.1s3.9,4.8,5.1,7.6c1.3,3,1.9,6.1,1.9,9.3c0,3.2-0.6,6.4-1.9,9.3c-1.2,2.9-2.9,5.4-5.1,7.6s-4.8,3.9-7.6,5.1C-285.6,321.5-288.8,322.2-292,322.2z\",\r\n        filterMode: \"filter\",\r\n      },\r\n      //下面这个属性是里面拖到\r\n      {\r\n        type: \"inside\",\r\n        show: true,\r\n        xAxisIndex: [0],\r\n        start: 0, //默认为1\r\n        end: 50,\r\n      },\r\n    ],\r\n    calculable: true,\r\n    // 可以为一个函数返回\r\n    color: [\"#f60\", \"#00f\", \"#0f0\"],\r\n    series: [\r\n      {\r\n        name: \"新增样本统计\",\r\n        data: dataLine1,\r\n        stack: \"总量\",\r\n        type: \"line\",\r\n      },\r\n      {\r\n        name: \"检材统计\",\r\n        data: dataLine2,\r\n        stack: \"总量\",\r\n        type: \"line\",\r\n      },\r\n      {\r\n        name: \"终端数量统计\",\r\n        data: dataLine3,\r\n        stack: \"总量\",\r\n        type: \"line\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!mapRef) return;\r\n    const mychart = echarts.init(mapRef.current as HTMLDivElement);\r\n    setEchartsInstance(mychart);\r\n    echartsInstance?.on(\"click\", (params: any) => {\r\n      console.log(\"params\", params);\r\n    });\r\n    echartsInstance?.setOption(option as any);\r\n  }, [mapRef, option]);\r\n\r\n  return (\r\n    <div\r\n      ref={mapRef}\r\n      style={{ width: \"100%\", height: \"600px\", border: \"1px solid #ccc\" }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","G:\\test\\react-ts-library\\src\\components\\PeopleFieldChart.tsx",[],"G:\\test\\react-ts-library\\src\\components\\PeopleNumberChart.tsx",["89","90"],"G:\\test\\react-ts-library\\src\\pages\\notFound\\index.tsx",[],{"ruleId":"91","severity":1,"message":"92","line":5,"column":33,"nodeType":"93","messageId":"94","endLine":5,"endColumn":40},{"ruleId":"91","severity":1,"message":"95","line":10,"column":7,"nodeType":"93","messageId":"94","endLine":10,"endColumn":10},{"ruleId":"96","severity":1,"message":"97","line":294,"column":6,"nodeType":"98","endLine":294,"endColumn":22,"suggestions":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"91","severity":1,"message":"104","line":3,"column":10,"nodeType":"93","messageId":"94","endLine":3,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":2,"column":33,"nodeType":"93","messageId":"94","endLine":2,"endColumn":40},{"ruleId":"96","severity":1,"message":"105","line":161,"column":6,"nodeType":"98","endLine":161,"endColumn":22,"suggestions":"106"},{"ruleId":"100","replacedBy":"107"},{"ruleId":"102","replacedBy":"108"},{"ruleId":"91","severity":1,"message":"92","line":2,"column":33,"nodeType":"93","messageId":"94","endLine":2,"endColumn":40},{"ruleId":"91","severity":1,"message":"109","line":5,"column":7,"nodeType":"93","messageId":"94","endLine":5,"endColumn":16},{"ruleId":"96","severity":1,"message":"105","line":204,"column":6,"nodeType":"98","endLine":204,"endColumn":22,"suggestions":"110"},{"ruleId":"91","severity":1,"message":"109","line":9,"column":9,"nodeType":"93","messageId":"94","endLine":9,"endColumn":18},{"ruleId":"91","severity":1,"message":"111","line":45,"column":9,"nodeType":"93","messageId":"94","endLine":45,"endColumn":21},"@typescript-eslint/no-unused-vars","'ECharts' is defined but never used.","Identifier","unusedVar","'com' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'echartsInstance' and 'getCity'. Either include them or remove the dependency array.","ArrayExpression",["112"],"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'echartsInstance'. Either include it or remove the dependency array.",["115"],["113"],["114"],"'rich' is assigned a value but never used.",["116"],"'dataPie' is assigned a value but never used.",{"desc":"117","fix":"118"},"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"119","fix":"121"},"Update the dependencies array to be: [echartsInstance, getCity, mapRef, option]",{"range":"122","text":"123"},"Update the dependencies array to be: [echartsInstance, mapRef, option]",{"range":"124","text":"125"},{"range":"126","text":"125"},[8008,8024],"[echartsInstance, getCity, mapRef, option]",[3975,3991],"[echartsInstance, mapRef, option]",[5539,5555]]